/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context as ctx } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateRoleFieldsInput: { // input type
    name?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
  }
  CreateUserFieldsInput: { // input type
    email?: NexusGenScalars['Email'] | null; // Email
    password?: string | null; // String
    username?: string | null; // String
  }
  EmailWhereInput: { // input type
    equalTo?: NexusGenScalars['Email'] | null; // Email
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenScalars['Email'] | null; // Email
    greaterThanOrEqualTo?: NexusGenScalars['Email'] | null; // Email
    in?: Array<NexusGenScalars['Email'] | null> | null; // [Email]
    lessThan?: NexusGenScalars['Email'] | null; // Email
    lessThanOrEqualTo?: NexusGenScalars['Email'] | null; // Email
    matchesRegex?: string | null; // String
    notEqualTo?: NexusGenScalars['Email'] | null; // Email
    notIn?: Array<NexusGenScalars['Email'] | null> | null; // [Email]
    options?: string | null; // String
  }
  RoleEnumWhereInput: { // input type
    equalTo?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    exists?: boolean | null; // Boolean
    greaterThan?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    greaterThanOrEqualTo?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    in?: Array<NexusGenEnums['RoleEnum'] | null> | null; // [RoleEnum]
    lessThan?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    lessThanOrEqualTo?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    matchesRegex?: string | null; // String
    notEqualTo?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
    notIn?: Array<NexusGenEnums['RoleEnum'] | null> | null; // [RoleEnum]
    options?: string | null; // String
  }
  RoleWhereInput: { // input type
    name?: NexusGenInputs['RoleEnumWhereInput'] | null; // RoleEnumWhereInput
  }
  UpdateRoleFieldsInput: { // input type
    name?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
  }
  UpdateUserFieldsInput: { // input type
    email?: NexusGenScalars['Email'] | null; // Email
  }
  UserLoginWithInput: { // input type
    email?: NexusGenScalars['Email'] | null; // Email
  }
  UserWhereInput: { // input type
    email?: NexusGenInputs['EmailWhereInput'] | null; // EmailWhereInput
  }
}

export interface NexusGenEnums {
  RoleEnum: "Admin" | "Customer" | "Printer" | "Spectator"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  Email: any
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Role: { // root type
    name?: NexusGenEnums['RoleEnum'] | null; // RoleEnum
  }
  User: { // root type
    email?: NexusGenScalars['Email'] | null; // Email
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    resetEnv: boolean | null; // Boolean
  }
  Query: { // field return type
    customHello: string | null; // String
  }
  Role: { // field return type
    name: NexusGenEnums['RoleEnum'] | null; // RoleEnum
  }
  User: { // field return type
    email: NexusGenScalars['Email'] | null; // Email
    newSessionToken: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    resetEnv: 'Boolean'
  }
  Query: { // field return type name
    customHello: 'String'
  }
  Role: { // field return type name
    name: 'RoleEnum'
  }
  User: { // field return type name
    email: 'Email'
    newSessionToken: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}